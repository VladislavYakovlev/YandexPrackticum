#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <map>
#include <cmath>    
using namespace std;
 
const int MAX_RESULT_DOCUMENT_COUNT = 5;
 
string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}
 
int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}
 
vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }
 
    return words;
}
 
struct Document {
    int id;
    double relevance;
};
 
struct Query {
    set<string> positive;
    set<string> negative;
};
 
class SearchServer {
    int document_count_ = 0;
public:
    void SetStopWords(const string& text) {
        for (const string& word : SplitIntoWords(text)) {
            stop_words_.insert(word);
        }
    }
 
    void AddDocument(int document_id, const string& document) {
        const vector<string> words = SplitIntoWordsNoStop(document);
        for (auto& word : words) {
            //documents_[word].insert(document_id);
            word_to_document_freqs_[word][document_id]+=1.0/words.size();
        }
        document_count_++;
    }
 
    vector<Document> FindTopDocuments(const string& raw_query) const {
        const Query query_words = ParseQuery(raw_query);
        auto matched_documents = FindAllDocuments(query_words);
 
        sort(matched_documents.begin(), matched_documents.end(),
            [](const Document& lhs, const Document& rhs) {
                return lhs.relevance > rhs.relevance;
            });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        return matched_documents;
    }
 
private:
    map<string, set<int>> documents_;
    map<string, map<int, double>> word_to_document_freqs_; // word, map<id, TF>
    set<string> stop_words_;
 
 
 
 
    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }
 
    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }
    Query ParseQuery(const string& text) const {
        //vector<string> words;
        //
        Query out;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                if (word[0] == '-')
                    out.negative.insert(word.substr(1));
                else out.positive.insert(word);
            }
        }
        return out;
    }
    ////////////////////////////////////////////////////////////////////////////////
    vector<Document> FindAllDocuments(const Query& query_words) const {
        map<int,double> IDrol;
        vector<Document> matched_documents;
        for (const auto& word : query_words.positive) {
            if (word_to_document_freqs_.count(word) != 0)
            {
                for (auto& q : word_to_document_freqs_.at(word))
                {
                   const double IDF = log(static_cast<double>(document_count_) / word_to_document_freqs_.at(word).size());
                    IDrol[q.first]+= IDF * q.second;
                }
            }
        }
        for (const auto& word : query_words.negative) {
            if (word_to_document_freqs_.count(word) != 0)
            {
                for (auto i : word_to_document_freqs_.at(word))
                {
                    IDrol.erase(i.first);
                }
            }
        }
 
        for (const auto& [d, r] : IDrol) {
                  if (r > 0) {
                matched_documents.push_back({ d, r });
            }
        }
        return matched_documents;
    }
    ////////////////////////////////////////////////////////////////////////////////
};
 
SearchServer CreateSearchServer() {
    SearchServer search_server;
    search_server.SetStopWords(ReadLine());
 
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        search_server.AddDocument(document_id, ReadLine());
    }
 
    return search_server;
}
 
int main() {
    const SearchServer search_server = CreateSearchServer();
 
    const string query = ReadLine();
    for (const auto& [document_id, relevance] : search_server.FindTopDocuments(query)) {
        cout << "{ document_id = "s << document_id << ", "
            << "relevance = "s << relevance << " }"s << endl;
    }
}