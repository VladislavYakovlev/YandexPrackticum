#include <vector>
#include <iostream>
#include <set>
#include <map>
 
using namespace std;
 
template <typename Element, typename Value>
ostream& Print(ostream& out, const map<Element,Value>& container){
bool is_first = true;
    for (const auto& [E,V] : container) {
        if (is_first) {
            out <<"("s<< E << ", " << V<<")"s;
            is_first = false;
        }
        else{
        out << ", "s<<"("s << E << ", "s<< V<<")"s;
        }
        
    }
    return out;
}
 
template <typename Element>
ostream& Print(ostream& out, const Element& container){
bool is_first = true;
    for (const auto& element : container) {
        if (!is_first) {
            out << ", "s;
        }
        is_first = false;
        out << element;
    }
    return out;
}
 
//print set
template <typename Element>
ostream& operator<<(ostream& out, const set<Element>& container) {
    out<<"{";
    return Print(out, container)<<"}";
}  
 
//print vector
template <typename Element>
ostream& operator<<(ostream& out, const vector<Element>& container) {
    out<<"["s;
    return Print(out, container)<<"]"s;
 out<<"]"s;
}
 
//print map
template <typename Element, typename Value>
ostream& operator<<(ostream& out, const map<Element, Value>& container) {
out<<"<"s;
return Print(out, container), out<<">"s;;
}

int main() {
const set<string> cats = {"Мурка"s, "Белка"s, "Георгий"s, "Рюрик"s};
cout << cats << endl;

const vector<int> ages = {10, 5, 2, 12};
cout << ages << endl;

const map<string, int> cat_ages = {
    {"Мурка"s, 10}, 
    {"Белка"s, 5},
    {"Георгий"s, 2}, 
    {"Рюрик"s, 12}
};
cout << cat_ages << endl; 
}